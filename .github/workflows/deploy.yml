name: Deploy

on:
  workflow_dispatch:
    inputs:
      qa:
        description: Deploy to qa?
        default: 'false'
        required: true
      staging:
        description: Deploy to staging?
        default: 'false'
        required: true
      production:
        description: Deploy to production?
        default: 'false'
        required: true
      sandbox:
        description: Deploy to sandbox?
        default: 'false'
        required: true
      pr:
        description: PR number for the review app
        required: false
      sha:
        description: Commit sha to be deployed
        required: true

jobs:
  prepare-matrix:
    name: Prepare Environment Matrix
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      environments: ${{ steps.select-environments.outputs.environments || steps.set-pr-environment.outputs.environments }}
    steps:
      - id: select-environments
        if:   github.event.inputs.pr == ''
        uses: DFE-Digital/bat-infrastructure/actions/prepare-environment-matrix@main

      - id:  set-pr-environment
        if:  github.event.inputs.pr != ''
        run: echo "::set-output name=environments::$PR"
        env:
          PR: '{"environment": ["${{ github.event.inputs.pr }}"]}'

      - uses: DFE-Digital/github-actions/turnstyle@master
        name: Wait for other inprogress deployment runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    name: ${{ matrix.environment }} Deployment
    needs: [prepare-matrix]
    strategy:
      max-parallel: 1
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.environments) }}
    steps:
      - name: Start ${{ matrix.environment }} Deployment
        uses: bobheadxi/deployments@v0.4.3
        id: deployment
        with:
          env:   ${{ matrix.environment }}
          step:  start
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Terraform v0.13.5
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.5

      - name: Set environment variables
        run: |
          if [ -n "${{ github.event.inputs.pr }}" ]; then
            PR_NUMBER=${{ github.event.inputs.pr }}
            echo "DEPLOY_ENV=review" >> $GITHUB_ENV
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
            echo "DEPLOY_URL=https://publish-teacher-training-pr-$PR_NUMBER.london.cloudapps.digital" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_ENV
          fi;
        env:
          DEPLOY_ENV:   ${{ matrix.environment }}

      - uses: azure/login@v1
        with:
          creds: ${{ secrets[format('AZURE_CREDENTIALS_{0}', env.DEPLOY_ENV)] }}

      - name: Validate Azure key vault secrets
        run: |
          wget https://raw.githubusercontent.com/DFE-Digital/bat-platform-building-blocks/master/scripts/fetch_config/fetch_config.rb
          chmod +x fetch_config.rb
          . "terraform/workspace_variables/${DEPLOY_ENV}.sh"
          ./fetch_config.rb -s "azure-key-vault-secret:${TF_VAR_key_vault_name}/${TF_VAR_key_vault_app_secret_name}" -d quiet \
            && echo Data in "${TF_VAR_key_vault_name}/${TF_VAR_key_vault_app_secret_name}" looks valid
          ./fetch_config.rb -s "azure-key-vault-secret:${TF_VAR_key_vault_name}/${TF_VAR_key_vault_infra_secret_name}" -d quiet \
            && echo Data in "${TF_VAR_key_vault_name}/${TF_VAR_key_vault_infra_secret_name}" looks valid

      - name: Terraform init, plan & apply
        run: make ${{env.DEPLOY_ENV}} ci deploy
        env:
          ARM_ACCESS_KEY:             ${{ secrets[format('ARM_ACCESS_KEY_{0}', env.DEPLOY_ENV)] }}
          IMAGE_TAG:                  ${{ github.event.inputs.sha }}
          APP_NAME:                   ${{ env.PR_NUMBER }}
          TF_VAR_azure_credentials:   ${{ secrets[format('AZURE_CREDENTIALS_{0}', env.DEPLOY_ENV)] }}
          CONFIRM_PRODUCTION:         "yes"


      - name: Trigger ${{ env.DEPLOY_ENV }} Smoke Tests
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Smoke Tests
          token:    ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          inputs:   '{"environment": "${{ env.DEPLOY_ENV }}", "pr": "${{ github.event.inputs.pr }}"}'

      - name: Wait for smoke tests
        id: wait_for_smoke_tests
        uses: fountainhead/action-wait-for-check@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref:   ${{ github.ref }}
          checkName: smoke-tests-${{ env.DEPLOY_ENV }}
          timeoutSeconds:  300
          intervalSeconds: 15

      - name: Stop when smoke tests fail
        if: steps.wait_for_smoke_tests.outputs.conclusion == 'failure'
        run: exit 1

      - name: Update ${{ matrix.environment }} status
        if: ${{ always() }}
        uses: bobheadxi/deployments@v0.4.3
        with:
          env:  ${{ matrix.environment }}
          step: finish
          token:  ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ env.DEPLOY_URL }}

      - name: 'Notify #twd_publish_tech on failure'
        if: ${{ failure() && github.ref == 'refs/heads/master' }}
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_CHANNEL: twd_publish_tech
          SLACK_COLOR: '#ef5343'
          SLACK_ICON_EMOJI: ':github-logo:'
          SLACK_USERNAME: Publish Teacher Training
          SLACK_TITLE: Deployment Failure
          SLACK_MESSAGE: '<!channel> Deploy to ${{ env.DEPLOY_ENV }} failed :fire:'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
